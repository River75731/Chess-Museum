{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "build & debug file",
            "type": "shell",
            "command": "g++",
            "args": [
                "-g",
                "-o",
                "${fileBasenameNoExtension}",
                "${file}",
                "-Wall", // 开启额外警告
                "-static-libgcc", // 静态链接libgcc，一般都会加上
                "-std=c++17", // C++最新标准为c++17，或根据自己的需要进行修改
                "-lglut64", //使用glut
                "-lglu32",
                "-lopengl32"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            }
        },
        {
            "label": "build & debug mutiple files", // 任务名称，与launch.json的preLaunchTask相对应
            "command": "g++", // 要使用的编译器
            "args": [
                // "${file}", //在哪个文件的视图上选择仿真，则选择哪个文件
                // "${fileDirname}/*.cpp",
                "${workspaceFolder}/src/main.cpp",
                "${workspaceFolder}/src/triangle.cpp",
                "${workspaceFolder}/src/matrix.cpp",
                "-o", // 指定输出文件名，不加该参数则默认输出a.exe，Linux下默认a.out
                "debug", //选择输出的文件名称，和前面的${file}是对应的，一般默认的名称就是前面的${file}.exe
                "-g", // 生成和调试有关的信息
                "-lglut64",
                "-lglu32",
                "-lopengl32",
                // "-Wall" // 开启额外警告
            ], // 编译命令参数
            "type": "shell", // 可以为shell或process，前者相当于先打开shell再输入命令，后者是直接运行命令
            "group": {
                "kind": "build",
                "isDefault": true // 设为false可做到一个tasks.json配置多个编译指令，需要自己修改本文件
            },
            "presentation": {
                "echo": true,
                "reveal": "always", // 在“终端”中显示编译信息的策略，可以为always，silent，never。具体参见VSC的文档
                "focus": true, // 设为true后可以使执行task时焦点聚集在终端
                "panel": "shared" // 不同的文件的编译信息共享一个终端面板
            }
        }
    ]
}